expression = operand:{binary_operator:operand};

packed_expression:() = expression;

argument_list:() = [expression:{comma:expression}];
subscript:[]     = [expression                   ];

operand = {unary_operator}:(literal|identifier|packed_expression):[argument_list|subscript];




parameter = identifier:[identifier];

parameter_list:() = [parameter:{comma:parameter}];

function_declaration = "function":identifier:["=":identifier:parameter_list:[function_definition]];

function_definition:{} = {statement};


statement = return_statement|expression|semicolon;


return_statement = "return":[expression];



initializer = literal|identifier|expression;

initializer_list:{} = [initializer:{comma:initializer}:[comma]];


elements = {initializer_list};


unary_operator =
  "+"|
  "-"|
  "*"|
  "!"|
  "~";


binary_operator =
  "+"|
  "-"|
  "*"|
  "/"|
  "%"|
  "|"|
  "&"|
  "^"|
  "&&"|
  "||"|
  "=="|
  "!="|
  "<"|
  "<="|
  ">"|
  ">="|
  "<<"|
  ">>"|
  "+="|
  "-="|
  "*="|
  "/="|
  "%="|
  "<<="|
  ">>="|
  "&="|
  "|="|
  "^="|
  "="|
  "->"|
  ".";


